<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on A Notebook of Extendswind</title>
    <link>https://extendswind.top/tags/software/</link>
    <description>Recent content in software on A Notebook of Extendswind</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>本站原创文章遵循CC-BY 4.0版权协议，转载注明出处即可</copyright>
    <lastBuildDate>Sat, 04 Dec 2021 00:00:00 +0800</lastBuildDate><atom:link href="https://extendswind.top/tags/software/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>syncthing文件同步网盘配置</title>
      <link>https://extendswind.top/posts/technical/syncthing_install_for_vps/</link>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0800</pubDate>
      
      <guid>https://extendswind.top/posts/technical/syncthing_install_for_vps/</guid>
      <description>在需要同步的文件不太大时，坚果云一类的网盘的效果不错，安装软件即可，不需要折腾还功能多。不考虑同步功能，只是想要存数据的话，NAS一般就可以满足要求。owncloud、nextcloud一类的私有云网盘提供了更多的功能，如可以浏览器查看分享文件。
相比之下，Syncthing只是一个纯粹的文件同步软件。主要优点是配置简单，没有其它的依赖，配置局域网的文件同步以及vps的文件同步实现起来容易，不像私有网盘程序依赖一套数据库、php、web服务等。但是缺点也很明显，没有什么多余的功能，无法单独上传和下载文件，也不能直接分享单个文件。
简单配置 linux的包管理器大多可以直接安装，然后运行Syncthing就可以启动，默认只提供了浏览器的web端管理UI，在 127.0.0.1:8384 访问。
两个节点都安装启动后，可以直接通过id添加对方。运行Syncting的各个节点之间没有主从的区别，通过共享文件夹的方式全部同步为相同的文件状态。添加后需要在对方的web UI中确认。
如果在没有桌面环境的linux服务器（如VPS）上安装，需要在 ~/.config/syncthing/config.xml 配置中将127.0.0.1改为0.0.0.0，防火墙放开8384端口、22000端口。然后在本地浏览器中用服务器 ip:8384 访问。
直连服务器配置 在局域网内或者连接有公网ip的主机时，会默认使用直连的方式。当两个主机不能直接连接，或者网络状态不好时，会通过relay中继服务器连接。
VPS的web UI中直连的listener选项卡为：
quic://0.0.0.0:22000
tcp://0.0.0.0:22000
连接VPS时，在address选项中将上面0.0.0.0替换成VPS服务器的ip，替代默认的dynamic即可。
文件版本保存 一个文件可能会修改多次，文件夹的设置中有File Version选项，可以按时间、修改次数、删除等方式备份多个版本，具体设置界面有说明。
安全相关 每个节点的id不包含隐私信息，连接时以及分享文件夹时都需要在两个节点的web UI中确认，id没必要加密保存。节点之间的数据传输通过TLS加密，不用太考虑中心服务器导致的隐私问题。
web UI 页面直接暴露给外网可能会容易被被端口扫描后攻击，可以设置密码加强安全性。或者通过反向代理隐藏web UI的端口，具体配置在 https://docs.syncthing.net/users/reverseproxy.html。关于反向代理踩的一个小坑：nginx设置中的location /syncthing/后面的斜杠不能漏。
文件分享 Syncthing不支持文件分享，只能间接的处理，下面放个简单的nginx配置解决web服务中分享某个文件文件的下载功能。（至于上传，可以考虑sftp、samba一类的服务，这个比较弱）
location /file_share/ { alias /home/user/Syncthing/public/; autoindex on; autoindex_exact_size off; # 文件大小显示MB，GB单位，默认为b； autoindex_localtime on; # 服务器本地时区显示文件修改日期 } 基本原理 同步设计上首先将大文件切割成block，小文件直接单独作为block（和HDFS的操作类似）。对每个block计算hash值，通过hash值判断文件的完整性和变化（可以自动识别重命名）。当发生文件变化时，操作系统会通知Syncthing程序，Syncthing程序之间传输元数据信息以及变化的数据。
连接上每个Syncthing程序通过唯一id识别，默认打开了本地发现（local discovery）和全网发现（global discovery）。本地发现能够在添加其它节点时自动找到局域网内的其它服务，全局发现依赖了额外的官方服务器，能根据id直接找到对应的节点（不确定ip是通过id算出来的还是全局发现找到的）。
为了使不在同一个局域网下的节点能够同步，官方提供了relay服务器作为中介，不在局域网内的同步默认可以直接通过官方relay服务器进行，也可以自己在有公网ip的机器上架服务。relay服务默认为开启状态，局域网内的节点可能由于网络状况等问题从直连转为relay连接，在配置的web GUI中的Remote Devices下的address中可以看到是直接的ip还是带relay的ip，此处配置可以修改。
Sycnthing默认有几个地方会连接官方服务器：1. 使用数据收集（第一次打开web UI会询问是否同意）；2. 全局发现；3. relay中继服务器。为了方便无所谓，如果只是想单纯在网络可以互通的环境下使用文件同步，可以考虑在设置中把这几个都关了。</description>
    </item>
    
    <item>
      <title>vsftp 匿名访问设置设置</title>
      <link>https://extendswind.top/posts/technical/vsftpd_configuration/</link>
      <pubDate>Fri, 18 Oct 2019 21:59:49 +0800</pubDate>
      
      <guid>https://extendswind.top/posts/technical/vsftpd_configuration/</guid>
      <description>vsftpd (very secure ftpd)，这软件在权限管理什么的也太安全了点，一点小细节出问题也会出现访问不了的问题。只是想架个ftp局域网传文件，一些博客里小细节和背后设计没有提到，踩了一点坑，记录一下简单的匿名ftp访问方案。
主要步骤 1. 使用包管理器安装 vsftpd 。（apt, yum, pacman等)
2. 修改配置文件 /etc/vsftpd.conf
anonymous_enable=YES # 允许匿名访问 write_enable=YES # 允许写文件 anon_upload_enable=YES # 允许匿名用户上传文件 anon_mkdir_write_enable=YES # 允许匿名用户创建目录和写权限 anon_other_write_enable=YES # 允许匿名用户删除、重命名等其它权限 这个在配置文件里默认找不到 3. 新建匿名访问的用户和文件夹
通过 local_enable 选项能够允许ftp通过本地用户访问，登录之后会访问用户的主目录。当使用匿名用户访问时，vsftpd会将用户名为ftp的用户作为登录用户，进入ftp用户的主目录。
注意，考虑到安全问题，ftp匿名用户的主目录必须为只读，如果需要上传文件，需要在主目录下新建有写权限的文件夹。
通常会选择/var/ftp文件夹存放文件而不是用户默认的/home，因此可以修改用户的主目录位置（一般放在/var/ftp），不修改也能用。再次强调，注意主目录对ftp用户的权限必须为只读。
sudo mkdir /var/ftp # 新建用户文件夹 sudo useradd -d /var/ftp ftp # 新建用户，并指定用户home目录 # 如果ftp用户已经存在，在/etc/passwd文件里改用户目录为/var/ftp sudo mkdir /var/ftp/pub # 新建一个用于写数据的文件夹 sudo chmod 777 /var/ftp/pub # 修改文件夹权限 4. 启动服务
systemctl start vsftpd
其它 防火墙和SELinux如果使用了需要添加响应的通过规则。
测试访问可以直接用浏览器 ftp://ip_address，linux下可以使用FileZilla。</description>
    </item>
    
    <item>
      <title>anki的使用以及anki server的配置</title>
      <link>https://extendswind.top/posts/technical/anki_and_anki_server/</link>
      <pubDate>Mon, 04 Mar 2019 21:59:49 +0800</pubDate>
      
      <guid>https://extendswind.top/posts/technical/anki_and_anki_server/</guid>
      <description>首先吐槽，anki作为老牌软件，国内资料并不多。
虽然html的卡片显示和python的插件式开发上看比较适合程序员，但从各种配置上感觉程序员用户量并不大。
因此，想深度使用准备折腾。
简单使用 淘制作好的卡片，导入 卡片可以套模板更美观（添加时的Cards选项，支持html） 添加单词和读音用FastWQ（只支持新版本，查词速度快） （已不支持新版本）插件里的awesome TTS很多人推荐但速度略慢 （已不支持新版本）添加单词可以用Word Query 官方文档https://apps.ankiweb.net/docs/manual.html
插件编写文档https://apps.ankiweb.net/docs/addons.html
插件安装 官网上找插件对应的id编号，然后打开anki的插件设置，添加插件中填入插件id号即可下载。
FastWQ插件 首先在tools菜单下的FastWQ插件设置中，选择note type，然后第一列中选择单词所在位置，第三列选择想要用的在线字典，第四列的Fields中选择行对应的需要填入的内容。
然后在add单词的目录中，先填入单次，然后点query&amp;ndash;&amp;gt; all fields，会将查到的结果填入所有的框。
一些坑 删除卡片不会删除对应的媒体文件，需要点击 check media 后手动删除。
anki有些历史遗留问题，大量的插件和资料都是在之前的anki 2.0.x上的，现在的2.1.x版本将pyqt4升级到pyqt5，很多插件没有跟着升级而无法使用。
anki server 的安装 官网的速度爆表，而且有数据安全问题，因此官网给出了自建anki server的解决方案。
百度上的大多使用 https://github.com/dsnopek/anki-sync-server ，可以基于pip2和python2直接安装，个人在基于Arch的linux下感觉坑多，在linux上的anki 2.1.9连不上上面python2的服务器（bug解决一个又出一个），更建议使用基于python3的fork项目：https://github.com/tsudoko/anki-sync-server 。
基于python3的仓库 github上的readme已经写得比较清楚，下面的搬运点大概。
1、clone 仓库
git clone https://github.com/tsudoko/anki-sync-server.git
2、安装anki或anki-bundled相关的库
直接使用包管理器安装 sudo pacman -S anki
如果包管理器里没有anki（如debian），也可以用pip安装anki-bundled相关的库
$ git submodule update --init # anki-bundled已经加入为submodule，可以先更新 $ cd anki-bundled $ pip install -r requirements.txt # 安装相关的库 3、安装webob</description>
    </item>
    
  </channel>
</rss>
