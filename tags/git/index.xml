<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on A Notebook of Extendswind</title>
    <link>https://extendswind.top/tags/git/</link>
    <description>Recent content in git on A Notebook of Extendswind</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>本站原创文章遵循CC-BY 4.0版权协议，转载注明出处即可</copyright>
    <lastBuildDate>Fri, 03 Dec 2021 16:00:48 +0800</lastBuildDate><atom:link href="https://extendswind.top/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git push时提示错误 sign_and_send_pubkey: no mutual signature supported</title>
      <link>https://extendswind.top/posts/technical/git_push_sign_and_send_pubkey/</link>
      <pubDate>Fri, 03 Dec 2021 16:00:48 +0800</pubDate>
      
      <guid>https://extendswind.top/posts/technical/git_push_sign_and_send_pubkey/</guid>
      <description>git push命令之后，出现下面的错误提示：
 sign_and_send_pubkey: no mutual signature supported git@gitee.com: Permission denied (publickey). fatal: Could not read from remote repository.
Please make sure you have the correct access rights and the repository exists.
 openssh的新版本（当前8.8p1-1）默认不支持ras的默认秘钥。
一开始以为是gitee码云干了什么升级，之后发现是我的manjaro openssh版本太新的问题，已经不支持我几年前生成的秘钥（但是为什么ssh-keygen还是默认用的rsa）。
推荐做法 ssh-keygen -t ed25519 -C &amp;ldquo;your_email@example.com&amp;rdquo;
生成一个新的秘钥，然后公钥添加到gitee账户。
最简单处理 修改ssh的客户端的配置文件，~/.ssh/config 或全局的配置文件 /etc/ssh/ssh_config，在其中加下面的代码。
 PubkeyAcceptedKeyTypes +ssh-rsa
 </description>
    </item>
    
    <item>
      <title>leetcode: Median of Two Sorted Arrays</title>
      <link>https://extendswind.top/posts/technical/leetcode4/</link>
      <pubDate>Tue, 13 Nov 2018 10:30:00 +0800</pubDate>
      
      <guid>https://extendswind.top/posts/technical/leetcode4/</guid>
      <description>题目   Median of Two Sorted Arrays There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)). You may assume nums1 and nums2 cannot be both empty. Example 1: nums1 = [1, 3] nums2 = [2] The median is 2.0 Example 2: nums1 = [1, 2] nums2 = [3, 4] The median is (2 + 3)/2 = 2.</description>
    </item>
    
    <item>
      <title>git 代码回滚与爬坑 -- reset and revert</title>
      <link>https://extendswind.top/posts/technical/git_code_roll_back_revert_and_reset/</link>
      <pubDate>Tue, 11 Sep 2018 10:30:00 +0800</pubDate>
      
      <guid>https://extendswind.top/posts/technical/git_code_roll_back_revert_and_reset/</guid>
      <description>reset 某些特殊的情况下，需要回退到先前的某一次提交。
git log 查找想要回退的commit的id后运行：
git reset --hard 2c1e288
回退后git log只会显示回退版本之前的提交。如果需要返回最新的提交，使用git reflog查看对应的id。
git reset只适合本地的回退和查看先前代码。如果远程仓库已有最新的提交，git会认为远程仓库的代码较新，需要先同步远程代码再进行修改，此情况下建议使用revert。
git reset &amp;ndash;soft &amp;ndash;mixed &amp;ndash;hard 以HEAD～为例（HEAD前的一次提交）
git reset --soft HEAD~ 会回到前一次提交的commit执行之前的状态 git reset --mixed HEAD~ 会回到前一次提交的add执行之前的状态 git reset --hard HEAD~ 会回到前一次提交的add执行之前的状态，并且将目录里的所有文件调整为前一次的提交状态
通常回退时需要将文件也回退需要加 --hard 标签。
git的文件组织 git将所有的文件以hash码命名放在仓库中存储。
HEAD指针，一般可以理解为当前commit状态的一个快照（指向仓库中当前commit的所有的文件）。每次commit或者merge等会创建新的commit节点时，会让HEAD指向新的位置。
reset会改变HEAD指针的位置与HEAD对应的分支指针的位置，checkout只会改变HEAD指针指向的分支。
revert git revert &amp;lt;commit-id&amp;gt; 相当于取消一次commit ，会让结果和没有这一次提交一样，并非像reset那样直接回到某一次commit的代码。
使用revert不会破坏历史记录，只是提交一个新的修改使修改后代码和以前一致。
实质上相当于用前的代码merge 后的代码，因此如果后面对代码文件做了修改需要解决冲突。
revert一个merge commit 注意revert用在merge的commit上的情况有坑
git revert &amp;lt;commit-id&amp;gt; -m 1  需要添加-m参数，指定是merge前的第几个分支（git log上的merge后）。
revert的主要麻烦：如果存在分支合并的情况，如下，从m1 revert到a2时会添加一个新的提交m2，当m2与b2 merge时会显示已经merge过。
a1 -&amp;gt; a2 -&amp;gt; m1 -&amp;gt; m2 b1 -&amp;gt; b2 /</description>
    </item>
    
  </channel>
</rss>
